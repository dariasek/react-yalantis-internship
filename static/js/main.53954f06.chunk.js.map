{"version":3,"sources":["components/Month/Month.module.css","components/Calendar/Calendar.module.css","components/Calendar/CalendarMonth/CalendarMonth.module.css","components/Month/Month.jsx","components/Calendar/CalendarMonth/CalendarMonth.jsx","components/Calendar/Calendar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Month","state","peopleListDisplay","monthDisplay","leftTextVisibility","changeVisibility","setState","styleColor","peopleList","this","props","data","filter","el","Date","dob","getMonth","month","id","peopleListName","map","newDob","dd","getDate","mm","yyyy","getFullYear","className","styles","peopleListItem","firstName","lastName","length","onMouseEnter","onMouseLeave","style","borderColor","name","colorDiv","backgroundColor","textLeft","visibility","monthName","display","Component","CalendarMonth","linkDecoration","changeDecoration","calendarMonth","href","textDecoration","slice","Calendar","monthLinks","months","calendar","App","Boolean","window","location","hostname","match","fetch","then","response","json","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.53954f06.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"month\":\"Month_month__3-Q3F\",\"peopleList\":\"Month_peopleList__Og_Dc\",\"peopleListItem\":\"Month_peopleListItem__2d7Ct\",\"textLeft\":\"Month_textLeft__3kYtZ\",\"monthName\":\"Month_monthName__16bhs\",\"colorDiv\":\"Month_colorDiv__1D3Ev\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"calendar\":\"Calendar_calendar__2ciX6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"calendarMonth\":\"CalendarMonth_calendarMonth__1QLzY\"};","import React, { Component } from \"react\";\r\nimport styles from \"./Month.module.css\";\r\n\r\nclass Month extends Component {\r\n  state = {\r\n    peopleListDisplay: \"none\",\r\n    monthDisplay: \"flex\",\r\n    leftTextVisibility: \"hidden\",\r\n  };\r\n\r\n  changeVisibility = () => {\r\n    if (this.state.peopleListDisplay == \"none\") {\r\n      this.setState({\r\n        monthDisplay: \"none\",\r\n        peopleListDisplay: \"block\",\r\n        leftTextVisibility: \"visible\",\r\n      });\r\n    } else {\r\n      this.setState({\r\n        peopleListDisplay: \"none\",\r\n        monthDisplay: \"flex\",\r\n        leftTextVisibility: \"hidden\",\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let peopleList = this.props.data.filter((el) => {\r\n      let date = new Date(el.dob);\r\n      let monthOfBirth = date.getMonth() + 1;\r\n      return monthOfBirth == this.props.month.id;\r\n    });\r\n\r\n    let peopleListName = peopleList.map((el) => {\r\n      let newDob = new Date(el.dob);\r\n      let dd = newDob.getDate();\r\n      let mm = newDob.getMonth() + 1;\r\n      let yyyy = newDob.getFullYear();\r\n      if (dd < 10) {\r\n        dd = `0${dd}`;\r\n      }\r\n      if (mm < 10) {\r\n        mm = `0${mm}`;\r\n      }\r\n      newDob = `${mm}/${dd}/${yyyy}`;\r\n      return (\r\n        <div className={styles.peopleListItem}>\r\n          <div> {el.firstName + \" \" + el.lastName}</div>\r\n          <div>{newDob}</div>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    let styleColor;\r\n    if (peopleList.length >= 11) {\r\n      styleColor = \"#E35555\";\r\n    } else if (peopleList.length <= 10 && peopleList.length >= 7) {\r\n      styleColor = \"#ADE355\";\r\n    } else if (peopleList.length <= 6 && peopleList.length >= 3) {\r\n      styleColor = \"#55AEE3\";\r\n    } else if (peopleList.length <= 2 && peopleList.length >= 0) {\r\n      styleColor = \"#D9DADA\";\r\n    }\r\n\r\n    return (\r\n      <div\r\n        className={styles.month}\r\n        onMouseEnter={this.changeVisibility}\r\n        onMouseLeave={this.changeVisibility}\r\n        style={{ borderColor: styleColor }}\r\n        id={this.props.month.name}\r\n      >\r\n        <div\r\n          className={styles.colorDiv}\r\n          style={{ backgroundColor: styleColor }}\r\n        >\r\n          <div\r\n            className={styles.textLeft}\r\n            style={{ visibility: this.state.leftTextVisibility }}\r\n          >\r\n            {this.props.month.name}\r\n          </div>\r\n        </div>\r\n        <div\r\n          className={styles.monthName}\r\n          style={{ display: this.state.monthDisplay }}\r\n        >\r\n          {this.props.month.name}\r\n        </div>\r\n        <div\r\n          className={styles.peopleList}\r\n          style={{ display: this.state.peopleListDisplay }}\r\n        >\r\n          {peopleListName}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Month;\r\n","import React, { Component } from \"react\";\r\nimport styles from \"./CalendarMonth.module.css\";\r\n\r\nclass CalendarMonth extends Component {\r\n  state = {\r\n    linkDecoration: \"none\",\r\n  };\r\n\r\n  changeDecoration = () => {\r\n    if (this.state.linkDecoration === \"none\") {\r\n      this.setState({ linkDecoration: \"underline darkgrey\" });\r\n    } else {\r\n      this.setState({ linkDecoration: \"none\" });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <a\r\n          className={styles.calendarMonth}\r\n          href={`#${this.props.month.name}`}\r\n          onMouseEnter={this.changeDecoration}\r\n          onMouseLeave={this.changeDecoration}\r\n          style={{\r\n            textDecoration: this.state.linkDecoration,\r\n          }}\r\n        >\r\n          {this.props.month.name.slice(0, 3)}\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CalendarMonth;\r\n","import React, { Component } from \"react\";\r\nimport styles from \"./Calendar.module.css\";\r\nimport CalendarMonth from \"./CalendarMonth/CalendarMonth\";\r\n\r\nclass Calendar extends Component {\r\n  state = { };\r\n\r\n  render() {\r\n    let monthLinks = this.props.months.map((el) => <CalendarMonth month={el} /> );\r\n\r\n    return <div className={styles.calendar}>{monthLinks}</div>;\r\n  }\r\n}\r\n\r\nexport default Calendar;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Month from \"./components/Month/Month\";\nimport Calendar from \"./components/Calendar/Calendar\";\n\nclass App extends Component {\n  state = {\n    months: [\n      { id: 1, name: \"January\" },\n      { id: 2, name: \"February\" },\n      { id: 3, name: \"March\" },\n      { id: 4, name: \"April\" },\n      { id: 5, name: \"May\" },\n      { id: 6, name: \"June\" },\n      { id: 7, name: \"July\" },\n      { id: 8, name: \"August\" },\n      { id: 9, name: \"September\" },\n      { id: 10, name: \"October\" },\n      { id: 11, name: \"November\" },\n      { id: 12, name: \"December\" },\n    ],\n  };\n\n  render() {\n    let months = this.state.months.map((el) => (\n      <Month month={el} data={this.props.data} />\n    ));\n\n    return (\n      <div className=\"App\">\n        <Calendar months={this.state.months} />\n        <div className=\"months\">{months}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nlet dataUrl = \"https://yalantis-react-school-api.yalantis.com/api/task0/users\";\n\nfetch(dataUrl)\n  .then((response) => response.json())\n  .then((data) => {\n    ReactDOM.render(\n      <React.StrictMode>\n        <App data={data} />\n      </React.StrictMode>,\n      document.getElementById(\"root\")\n    );\n  });\n\nserviceWorker.unregister();\n"],"sourceRoot":""}